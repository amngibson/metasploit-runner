require 'metasploit/exploit_run_description'

describe 'exploit_run_description' do
  if File.file?('config/exploit.yml')
    File.rename('config/exploit.yml', 'config/exploit.yml.bak')
  end

  describe 'start' do
    before(:each) do
      @expected_connection = 'http://test.connection'
      @expected_token = 'testtoken'
      @expected_port = '3791'
      @expected_uri = '/api/1.1'
      @expected_ssl = false
      @expected_os_filter = false
      @expected_module_filter = 'exploit/windows/smb/psexec'
      @expected_report_type = :fisma
      @expected_workspacename = 'workspacename'
      @expected_nexpose_console_name = 'nexpose_console_name'
      @expected_webscan_task_id = '12'
      @expected_import_task_id = '1'
      @expected_tls ='TLS1'
      @mock_rpc_client = get_mock_rpc_client
      @mock_device_ip_to_scan = '127.0.0.1'
      @mock_device_url_to_scan = "http://#{@mock_device_ip_to_scan}/"
      @mock_whitelist_hosts = "10.0.0.0/8"

      @options =  {
        'connection_url' => @expected_connection,
        'port' => @expected_port,
        'uri' => @expected_uri,
        'use_ssl' => @expected_ssl,
        'ssl_version' => @expected_tls,
        'token' => @expected_token,
        'workspace_name' => @expected_workspace_name,
        'nexpose_console_name' => @expected_nexpose_console_name,
        'device_ip_to_scan' => @mock_device_ip_to_scan,
        'use_os_filter' => @expected_use_os_filter,
        'module_filter' => @expected_module_filter,
        'report_type' => @expected_report_type,
        'whitelist_hosts' => @mock_whitelist_hosts
      }

      @exploit_run_description = ExploitRunDescription.new(@options)
    end

    it 'should accept all of the needed parameters and persist them' do
      expect(@exploit_run_description.connection_url).to eq(@expected_connection)
      expect(@exploit_run_description.port).to eq(@expected_port)
      expect(@exploit_run_description.uri).to eq(@expected_uri)
      expect(@exploit_run_description.use_ssl).to eq(@expected_ssl)
      expect(@exploit_run_description.ssl_version).to eq(@expected_tls)
      expect(@exploit_run_description.token).to eq(@expected_token)
      expect(@exploit_run_description.workspace_name).to eq(@expected_workspace_name)
      expect(@exploit_run_description.nexpose_console_name).to eq(@expected_nexpose_console_name)
      expect(@exploit_run_description.device_ip_to_scan).to eq(@mock_device_url_to_scan)
      expect(@exploit_run_description.use_os_filter).to eq(@expected_os_filter)
      expect(@exploit_run_description.module_filter).to eq(@expected_module_filter)
      expect(@exploit_run_description.report_type).to eq(@expected_report_type)
      expect(@exploit_run_description.whitelist_hosts).to eq(@mock_whitelist_hosts)
    end

    it 'should use 3790 as default if port is empty string' do
      @exploit_run_description.port = ''
      expect(@exploit_run_description.port).to eq(CONSTANTS::DEFAULT_PORT)
    end

    it 'should use 3790 as default if port is nil' do
      @exploit_run_description.port = nil
      expect(@exploit_run_description.port).to eq(CONSTANTS::DEFAULT_PORT)
    end

    it 'should use /api/1.0 as default if empty string' do
      @exploit_run_description.uri = ''
      expect(@exploit_run_description.uri).to eq(CONSTANTS::DEFAULT_URI)
    end

    it 'should use /api/1.0 as default if nil' do
      @exploit_run_description.uri = nil
      expect(@exploit_run_description.uri).to eq(CONSTANTS::DEFAULT_URI)
    end

    it 'should use ssl true as default if empty string is passed' do
      @exploit_run_description.use_ssl = ''
      expect(@exploit_run_description.use_ssl).to eq(CONSTANTS::DEFAULT_SSL)
    end

    it 'should use ssl true as default if random string is passed' do
      @exploit_run_description.use_ssl = 'nathan is god'
      expect(@exploit_run_description.use_ssl).to eq(CONSTANTS::DEFAULT_SSL)
    end

    it 'should use ssl true as default if nil is passed' do
      @exploit_run_description.use_ssl = nil
      expect(@exploit_run_description.use_ssl).to eq(CONSTANTS::DEFAULT_SSL)
    end

    it 'should use ssl true as default if true is passed' do
      @exploit_run_description.use_ssl = true
      expect(@exploit_run_description.use_ssl).to eq(CONSTANTS::DEFAULT_SSL)
    end

    it 'should use TLS1 as default if empty string' do
      @exploit_run_description.ssl_version = ''
      expect(@exploit_run_description.ssl_version).to eq(CONSTANTS::DEFAULT_SSL_VERSION)
    end

    it 'should use TLS1 as default if nil is passed' do
      @exploit_run_description.ssl_version = nil
      expect(@exploit_run_description.ssl_version).to eq(CONSTANTS::DEFAULT_SSL_VERSION)
    end

    it 'should return false on the SSL Option if false is passed' do
      @exploit_run_description.use_ssl = false
      expect(@exploit_run_description.use_ssl).to eq(false)
    end

    it 'should use os filter false as default if empty string is passed' do
      @exploit_run_description.use_os_filter = ''
      expect(@exploit_run_description.use_os_filter).to eq(CONSTANTS::DEFAULT_OS_FILTER)
    end

    it 'should use os filter false as default if random string is passed' do
      @exploit_run_description.use_os_filter = 'nathan is god'
      expect(@exploit_run_description.use_os_filter).to eq(CONSTANTS::DEFAULT_OS_FILTER)
    end

    it 'should use os filter false as default if nil is passed' do
      @exploit_run_description.use_os_filter = nil
      expect(@exploit_run_description.use_os_filter).to eq(CONSTANTS::DEFAULT_OS_FILTER)
    end

    it 'should use os filter false as default if false is passed' do
      @exploit_run_description.use_os_filter = false
      expect(@exploit_run_description.use_os_filter).to eq(CONSTANTS::DEFAULT_OS_FILTER)
    end

    it 'should return true on the OS Filter option if true is passed' do
      @exploit_run_description.use_ssl = true
      expect(@exploit_run_description.use_ssl).to eq(true)
    end

    describe 'get metasploit options' do
      it 'should return the correct options' do
        expect(@exploit_run_description.get_options).to eq({:host => @expected_connection,
                               :port => @expected_port,
                               :token => @expected_token,
                               :uri => @expected_uri,
                               :ssl => @expected_ssl,
                               :ssl_version => @expected_tls})
      end

      it 'should be using the correct methods to fill the options' do
        @exploit_run_description.port = ''
        expect(@exploit_run_description.get_options).to eq({:host => @expected_connection,
                                                            :port => CONSTANTS::DEFAULT_PORT,
                                                            :token => @expected_token,
                                                            :uri => @expected_uri,
                                                            :ssl => @expected_ssl,
                                                            :ssl_version => @expected_tls})
      end
    end

    describe 'verify' do
      it 'should throw an error if no token' do
        @exploit_run_description.token = ''
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_TOKEN_MESSAGE)
        @exploit_run_description.token = nil
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_TOKEN_MESSAGE)
      end

      it 'should throw an error if no connection url' do
        @exploit_run_description.connection_url = ''
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_CONNECTION_URL_MESSAGE)
        @exploit_run_description.connection_url = nil
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_CONNECTION_URL_MESSAGE)
      end


      it 'should throw an error if no device ip' do
        @exploit_run_description.device_ip_to_scan = ''
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_DEVICE_IP_TO_SCAN_MESSAGE)
        @exploit_run_description.device_ip_to_scan = nil
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_DEVICE_IP_TO_SCAN_MESSAGE)
      end

      it 'should throw an error if workspace' do
        @exploit_run_description.workspace_name = ''
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_WORKSPACE_MESSAGE)
        @exploit_run_description.workspace_name = nil
        expect { @exploit_run_description.verify }.to raise_error(StandardError, CONSTANTS::REQUIRED_WORKSPACE_MESSAGE)
      end

      it 'should handle Array of command-line options' do
        @exploit_run_description = ExploitRunDescription.new %w(--port 12345)
        expect(@exploit_run_description.port).to eq('12345')
      end
    end
  end

  if File.file?('config/exploit.yml.bak')
    File.rename('config/exploit.yml.bak', 'config/exploit.yml')
  end
end
