require 'metasploit/exploit'

describe 'exploit' do
  describe 'start' do

    before(:all) do
      @expected_connection = 'http://test.connection'
      @expected_token = 'testtoken'
      @expected_port = '3791'
      @expected_uri = '/api/1.1'
      @expected_ssl = false
    end

    it 'should create a session with the metasploit server' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => @expected_uri, :ssl => @expected_ssl}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, @expected_ssl, @expected_token, '', '')
    end

    it 'should throw an error if no token is passed' do
      expect { Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, @expected_ssl, '', '', '') }.to raise_error(StandardError, 'PWNED! Token is required')
      expect { Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, @expected_ssl, nil, '', '') }.to raise_error(StandardError, 'PWNED! Token is required')
    end

    it 'should throw an error if no connection url is passed' do
      expect { Metasploit::Exploit.start('', @expected_port, @expected_uri, @expected_ssl, @expected_token, '', '') }.to raise_error(StandardError, 'PWNED! Connection URL is required')
      expect { Metasploit::Exploit.start(nil, @expected_port, @expected_uri, @expected_ssl, @expected_token, '', '') }.to raise_error(StandardError, 'PWNED! Connection URL is required')
    end

    it 'should use 3790 as default if port is empty string' do
      expected_options = {:host => @expected_connection, :port => '3790', :token => @expected_token, :uri => @expected_uri, :ssl => @expected_ssl}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, '', @expected_uri, @expected_ssl, @expected_token, '', '')
    end

    it 'should use 3790 as default if port is nil' do
      expected_options = {:host => @expected_connection, :port => '3790', :token => @expected_token, :uri => @expected_uri, :ssl => @expected_ssl}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, nil, @expected_uri, @expected_ssl,  @expected_token, '', '')
    end

    it 'should use /api/1.0 as default if no uri is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => '/api/1.0', :ssl => @expected_ssl}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, '', @expected_ssl,  @expected_token, '', '')
    end

    it 'should use /api/1.0 as default if no uri is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => '/api/1.0', :ssl => @expected_ssl}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, nil, @expected_ssl,  @expected_token, '', '')
    end

    it 'should use ssl true as default if empty string is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => @expected_uri, :ssl => true}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, '',  @expected_token, '', '')
    end

    it 'should use ssl true as default if random string is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => @expected_uri, :ssl => true}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, 'sadf',  @expected_token, '', '')
    end

    it 'should use ssl true as default if nil is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => @expected_uri, :ssl => true}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, nil,  @expected_token, '', '')
    end

    it 'should use ssl true as default if true is passed' do
      expected_options = {:host => @expected_connection, :port => @expected_port, :token => @expected_token, :uri => @expected_uri, :ssl => true}

      expect(Msf::RPC::Client).to receive(:new)
                                  .with(expected_options)

      Metasploit::Exploit.start(@expected_connection, @expected_port, @expected_uri, true,  @expected_token, '', '')
    end
  end
end