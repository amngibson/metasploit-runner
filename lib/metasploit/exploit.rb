require 'msfrpc-client'
require 'metasploit/constants'
require 'metasploit/exploit_run_description'

module Metasploit
  module Exploit
    def Exploit.start(connection_url, port, uri, use_ssl, token, workspace_name, nexpose_console_name, device_ip_to_scan)
      run_details = ExploitRunDescription.new connection_url, port, uri, use_ssl, token, workspace_name, nexpose_console_name, device_ip_to_scan
      run_details.verify

      rpc_client = get_new_metasploit_rpc_connection(run_details)

      create_workspace(rpc_client, run_details.workspace_name)

      do_nexpose_import(rpc_client, run_details)

      do_metasploit_scan(rpc_client, run_details)
    end

    private
    def self.get_new_metasploit_rpc_connection(run_details)
      client = Msf::RPC::Client.new(run_details.get_options)
      puts CONSTANTS::SUCCESSFUL_CONNECTION_MESSAGE

      client
    end

    def self.do_nexpose_import(rpc_client, run_details)
      import = rpc_client.call('pro.start_import', {'workspace' => run_details.workspace_name, 'DS_NEXPOSE_CONSOLE' => run_details.nexpose_console_name, 'DS_NEXPOSE_SITE' => run_details.workspace_name})

      wait_for_task_to_stop_running(rpc_client, CONSTANTS::IMPORTING_DATA_MESSAGE, import['task_id'])
    end
    
    def self.create_workspace(rpc_client, workspace_name)
      rpc_client.call('pro.workspace_add', {'name' => workspace_name})
    end

    def self.do_metasploit_scan(rpc_client, run_details)
      scan = rpc_client.call('pro.start_webscan', {'workspace' => run_details.workspace_name, 'DS_URLS' => run_details.device_ip_to_scan})

      wait_for_task_to_stop_running(rpc_client, CONSTANTS::SCANNING_MESSAGE, scan['task_id'])
    end

    def self.wait_for_task_to_stop_running(rpc_client, status_message, task_id)
      sleep(3)
      status = rpc_client.call('pro.task_status', task_id)
      puts status_message

      wait_for_task_to_stop_running(rpc_client, status_message, task_id) if status['status'] == CONSTANTS::RUNNING_IMPORT_STATUS
    end
  end
end